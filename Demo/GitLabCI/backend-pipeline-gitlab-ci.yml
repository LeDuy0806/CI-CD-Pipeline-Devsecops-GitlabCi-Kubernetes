variables: 
    USER_PROJECT: "todolist"
    PATH_PROJECT: "/home/${USER_PROJECT}/${CI_PROJECT_NAME}"
    COMMIT_URL: "${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHORT_SHA}"
    TAG_URL: "${CI_PROJECT_URL}/-/tags/${CI_COMMIT_REF_NAME}"
    IMAGE_VERSION: "${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
    GOLANGLINT_REPORT: "golanglint_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    SNYKSCAN_REPORT: "snyk_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    TRIVYFS_REPORT: "trivyfs_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    TRIVY_IMAGE_REPORT: "security_scan_image_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    K6_PERFORMACE_TEST_REPORT: "performace_test_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"

stages:
    - test source code
    - build
    - security scan image
    - deploy
    - performance testing
    - send report

golang lint scan:
    stage: test source code
    variables:
        GIT_STRATEGY: clone
    script:
        - docker run --rm -v $(pwd):/app -v ~/.cache/golangci-lint/v1.61.0:/root/.cache -w /app golangci/golangci-lint:v1.61.0-alpine golangci-lint run --enable=gosec,gocritic,revive,contextcheck,gocyclo,dupl,ineffassign --verbose --out-format=html --timeout 2m > $GOLANGLINT_REPORT.html || true
    after_script:
        - sudo chown -R gitlab-runner $(pwd)
    tags:
        - todolist-runner-dev-shell
    only:
        - tags
    artifacts:
        paths:
        - $GOLANGLINT_REPORT.html
        expire_in: 1 day

# trivyfs scan:
#     stage: test source code
#     variables:
#         GIT_STRATEGY: clone
#     script:
#         - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy fs /${CI_PROJECT_NAME} --severity LOW,MEDIUM,HIGH,CRITICAL --format template --template "@contrib/html.tpl" --output /${CI_PROJECT_NAME}/$TRIVYFS_REPORT.html
#     after_script:
#         - sudo chown -R gitlab-runner $(pwd)
#     tags:
#         - todolist-runner-dev-shell
#     only:
#         - tags
#     artifacts:
#         paths:
#         - $TRIVYFS_REPORT.html
#         expire_in: 1 day

snyk scan:
    stage: test source code
    variables:
        GIT_STRATEGY: clone
    script:
        - docker run --rm -v $(pwd):/app -e SNYK_AUTH_TOKEN=$SNYK_TOKEN -e OUTPUT_FILENAME=$SNYKSCAN_REPORT mixiyady/snyk:v1.1293.1
    after_script:
        - sudo chown -R gitlab-runner $(pwd)
    tags:
        - todolist-runner-dev-shell
    only:
        - tags
    artifacts:
        paths:
        - $SNYKSCAN_REPORT.html
        expire_in: 1 day

build:
    stage: build
    variables:
      GIT_STRATEGY: clone
    script:
        - docker build -t $IMAGE_VERSION .
    tags:
        - todolist-runner-dev-shell
    only:
        - tags


trivy scan image:
    stage: security scan image
    variables:
        GIT_STRATEGY: none
    script:
        - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy clean --all
        - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format template --template "@contrib/html.tpl" --output /${CI_PROJECT_NAME}/${TRIVY_IMAGE_REPORT}.html $IMAGE_VERSION
    after_script:
        - sudo chown -R gitlab-runner $(pwd)
    tags:
        - todolist-runner-dev-shell
    only:
        - tags
    artifacts:
        paths:
        - ${TRIVY_IMAGE_REPORT}.html
        expire_in: 1 day

deploy:
    stage: deploy
    variables:
      GIT_STRATEGY: none
    script:
        - sudo su - ${USER_PROJECT} -c "docker rm -f $CI_PROJECT_NAME;docker run --name $CI_PROJECT_NAME -dp "$BE_PORT" $IMAGE_VERSION"
    tags:
        - todolist-runner-dev-shell
    only:
        - tags


performance testing:
    stage: performance testing
    variables:
        GIT_STRATEGY: clone
    script:
        - chmod -R 777 ./performace_testing_script/
        - docker run --rm -v $(pwd)/performace_testing_script:/performace_testing_script -e BACKEND_ADDRESS=$ADDRESS_BACKEND grafana/k6 run /performace_testing_script/smoke-test.js
        - mv ./performace_testing_script/summary.html $(pwd)/$K6_PERFORMACE_TEST_REPORT.html
    after_script:
        - sudo chown -R gitlab-runner $(pwd)
    tags:
        - todolist-runner-dev-shell
    only:
        - tags
    artifacts:
        paths:
        - $K6_PERFORMACE_TEST_REPORT.html
        expire_in: 1 day

send report telegram:
    stage: send report
    variables:
        GIT_STRATEGY: clone
    script:
        - |
            curl -X POST "https://api.telegram.org/bot${TELE_BOT_TOKEN}/sendMessage" \
            -d "chat_id=${TELE_CHAT_ID}" \
            -d "text=Commit: ${COMMIT_URL}%0ATag: ${TAG_URL}%0APipeline: ${CI_PIPELINE_URL}"
        - |
            curl -F "chat_id=${TELE_CHAT_ID}" \
            -F 'media=[{"type": "document", "media": "attach://file1"}, {"type": "document", "media": "attach://file2"}, {"type": "document","media": "attach://file3"}, {"type": "document", "media": "attach://file4"}]' \
            -F "file1=@$(pwd)/${GOLANGLINT_REPORT}.html" \
            -F "file2=@$(pwd)/${SNYKSCAN_REPORT}.html" \
            -F "file3=@$(pwd)/${TRIVY_IMAGE_REPORT}.html" \
            -F "file4=@$(pwd)/${K6_PERFORMACE_TEST_REPORT}.html" \
            "https://api.telegram.org/bot${TELE_BOT_TOKEN}/sendMediaGroup" 
    tags:
        - todolist-runner-dev-shell
    only:
        - tags