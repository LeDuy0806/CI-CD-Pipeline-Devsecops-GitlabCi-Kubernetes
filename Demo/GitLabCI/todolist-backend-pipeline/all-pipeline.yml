variables:
    USER_PROJECT: 'todolist'
    COMMIT_URL: '${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHORT_SHA}'
    TAG_URL: '${CI_PROJECT_URL}/-/tags/${CI_COMMIT_REF_NAME}'
    MERGE_REQUEST_URL: '${CI_PROJECT_URL}/-/merge_requests/${CI_MERGE_REQUEST_IID}'
    IMAGE_NAME: '${CI_REGISTRY_USER}/${CI_PROJECT_NAME}'
    MR_IMAGE_TAG: 'merge_request_${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    STAGING_IMAGE_TAG: 'staging_${CI_COMMIT_SHORT_SHA}'
    PROD_IMAGE_TAG: '${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}'
    GOLANGLINT_REPORT: 'golang-ci-lint_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_${CI_MERGE_REQUEST_IID}_report'
    SNYKSCAN_REPORT: 'snyk_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_${CI_MERGE_REQUEST_IID}_report'
    TRIVY_IMAGE_REPORT: 'security_scan_image_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_${CI_MERGE_REQUEST_IID}_report'
    K6_PERFORMANCE_TEST_REPORT: 'performace_test_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report'

stages:
    - test source code
    - build
    - security scan image
    - push image
    - deploy
    - performance testing
    - send report

golang lint scan:
    stage: test source code
    script:
        - docker run --rm -v $(pwd):/app -v ~/.cache/golangci-lint/v1.61.0:/root/.cache -w /app golangci/golangci-lint:v1.61.0-alpine golangci-lint run --enable=gosec,gocritic,revive,contextcheck,gocyclo,dupl,ineffassign --verbose --out-format=html --timeout 2m > $GOLANGLINT_REPORT.html || true
        - echo "Golang lint scan completed"
    after_script:
        - sudo chown -R gitlab-runner $(pwd)
    tags:
        - todolist-runner-dev-shell
    rules:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "main"
    artifacts:
        paths:
            - $GOLANGLINT_REPORT.html
        expire_in: 1 day

snyk scan:
    stage: test source code
    variables:
        GIT_STRATEGY: none
    script:
        - docker run --rm -v $(pwd):/app -e SNYK_AUTH_TOKEN=$SNYK_TOKEN -e OUTPUT_FILENAME=$SNYKSCAN_REPORT mixiyady/snyk:v1.1293.1
    after_script:
        - sudo chown -R gitlab-runner $(pwd)
    tags:
        - todolist-runner-dev-shell
    rules:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "main"
    artifacts:
        paths:
            - $SNYKSCAN_REPORT.html
        expire_in: 1 day


build merge request:
    stage: build
    before_script:
        - echo "${CI_REGISTRY_PASSWORD}" | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
    script:
        - docker build --cache-from ${IMAGE_NAME}:${MR_IMAGE_TAG} -t  ${IMAGE_NAME}:${MR_IMAGE_TAG} .
        - docker push ${IMAGE_NAME}:${MR_IMAGE_TAG}
        - echo "Build completed"
    after_script:
        - docker logout
    tags:
        - todolist-runner-dev-shell
    rules:
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "staging"


trivy scan image:
    stage: security scan image
    variables:
        GIT_STRATEGY: none
    script:
        - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy clean --all
        - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --timeout 5m --format template --template "@contrib/html.tpl" --output /${CI_PROJECT_NAME}/${TRIVY_IMAGE_REPORT}.html ${IMAGE_NAME}:${MR_IMAGE_TAG}
        - echo "Trivy scan image completed"
    after_script:
        - sudo chown -R gitlab-runner $(pwd)
    tags:
        - todolist-runner-dev-shell
    rules:
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "staging"
    dependencies:
        - build merge request
    artifacts:
        paths:
            - ${TRIVY_IMAGE_REPORT}.html
        expire_in: 1 day

send pipeline report merge request:
    stage: send report
    variables:
        GIT_STRATEGY: none
    script:
        - |
            curl -X POST "https://api.telegram.org/bot${TELE_BOT_TOKEN}/sendMessage" \
            -d "chat_id=${TELE_CHAT_ID}" \
            -d "text= Merge Request ${CI_MERGE_REQUEST_IID} has been created for project '${CI_PROJECT_NAME}' from branch '${CI_COMMIT_REF_NAME}' to branch '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'.
            A new pipeline has been triggered for project '${CI_PROJECT_NAME}' at merge request '${CI_MERGE_REQUEST_IID}' with the following details:
            - Pipeline URL: ${CI_PIPELINE_URL} 
            - Commit URL: ${COMMIT_URL}
            - Merge Request URL: ${MERGE_REQUEST_URL}"
            - Image has been built: ${IMAGE_NAME}:${MR_IMAGE_TAG}
        - |
            if [ -f "$(pwd)/${TRIVY_IMAGE_REPORT}.html" ]; then
                file3="-F \"file3=@$(pwd)/${TRIVY_IMAGE_REPORT}.html\""
                media='[{"type": "document", "media": "attach://file1"}, {"type": "document", "media": "attach://file2"}, {"type": "document", "media": "attach://file3"}]'
            else
                file3=""
                media='[{"type": "document", "media": "attach://file1"}, {"type": "document", "media": "attach://file2"}]'
            fi

            curl -F "chat_id=${TELE_CHAT_ID}" \
                 -F "media=${media}" \
                 -F "file1=@$(pwd)/${GOLANGLINT_REPORT}.html" \
                 -F "file2=@$(pwd)/${SNYKSCAN_REPORT}.html" \
                 ${file3} \
                 "https://api.telegram.org/bot${TELE_BOT_TOKEN}/sendMediaGroup"
        - echo "Send report completed"
    tags:
        - todolist-runner-dev-shell
    rules:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "main"

build staging:
    stage: build
    variables:
        CACHE_IMAGE_TAG: 'merge_request_staging'
    before_script:
        - echo "${CI_REGISTRY_PASSWORD}" | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
    script:
        - docker pull ${IMAGE_NAME}:${CACHE_IMAGE_TAG} || true
        - docker build --cache-from ${IMAGE_NAME}:${CACHE_IMAGE_TAG} -t ${IMAGE_NAME}:${STAGING_IMAGE_TAG} .
        - docker push ${IMAGE_NAME}:${STAGING_IMAGE_TAG}
        - |
            curl --request PUT --header "PRIVATE-TOKEN: $CI_API_TOKEN" \
            --header "Content-Type: application/json" \
            --data "{\"key\": \"LATEST_STAGING_IMAGE\", \"value\": \"${IMAGE_NAME}:${STAGING_IMAGE_TAG}\"}" \
            "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/LATEST_STAGING_IMAGE"
        - echo "Build and push image completed"
    tags:
        - todolist-runner-build-shell
    rules:
        - if: '$CI_COMMIT_BRANCH == "staging"'

deploy staging:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    before_script:
        - echo "${CI_REGISTRY_PASSWORD}" | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
    script:
        - docker rm -f $CI_PROJECT_NAME || true
        - docker run --name $CI_PROJECT_NAME -dp "$BE_PORT" ${IMAGE_NAME}:${STAGING_IMAGE_TAG}
        - echo "Deploy completed"
    after_script:
        - docker logout
    tags:
        - todolist-runner-build-shell
    rules:
        - if: '$CI_COMMIT_BRANCH == "staging"'

performance testing:
    stage: performance testing
    script:
        - chmod -R 777 ./performace_testing_script/
        - docker run --rm -v $(pwd)/performace_testing_script:/performace_testing_script -e BACKEND_ADDRESS=$BACKEND_ADDRESS grafana/k6 run /performace_testing_script/smoke-test.js
        - mv ./performace_testing_script/summary.html $(pwd)/$K6_PERFORMANCE_TEST_REPORT.html
    after_script:
        - sudo chown -R gitlab-runner $(pwd)
    tags:
        - todolist-runner-build-shell
    rules:
        - if: '$CI_COMMIT_BRANCH == "staging"'
    artifacts:
        paths:
            - $K6_PERFORMANCE_TEST_REPORT.html
        expire_in: 1 day

send pipeline report staging:
    stage: send report
    variables:
        GIT_STRATEGY: none
    script:
        - |
            curl -X POST "https://api.telegram.org/bot${TELE_BOT_TOKEN}/sendMessage" \
            -d "chat_id=${TELE_CHAT_ID}" \
            -d "text=Pipeline Report for Staging Environment:
            - Pipeline URL: ${CI_PIPELINE_URL} 
            - Tag: ${TAG_URL}
            - Commit URL: ${COMMIT_URL}
            - Merge Request URL: ${MERGE_REQUEST_URL}"
        - |
            curl -F "chat_id=${TELE_CHAT_ID}" \
            -F 'media=[{"type": "document", "media": "attach://file1"}]' \
            -F "file1=@$(pwd)/${K6_PERFORMANCE_TEST_REPORT}.html" \
            "https://api.telegram.org/bot${TELE_BOT_TOKEN}/sendMediaGroup"
        - echo "Send report completed"
    tags:
        - todolist-runner-build-shell
    rules:
        - if: '$CI_COMMIT_BRANCH == "staging"'

build production:
    stage: build
    variables:
        GIT_STRATEGY: none
    before_script:
        - echo "${CI_REGISTRY_PASSWORD}" | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
    script:
        - docker pull $LATEST_STAGING_IMAGE
        - docker tag $LATEST_STAGING_IMAGE ${IMAGE_NAME}:${PROD_IMAGE_TAG}
        - docker push ${IMAGE_NAME}:${PROD_IMAGE_TAG}
        - echo "Build image production completed"
    after_script:
        - docker logout
    tags:
        - todolist-runner-build-shell
    rules:
        - if: '$CI_COMMIT_TAG'

deploy production:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - git clone https://${MAINFEST_PROJECT_ACCESS_TOKEN}@${CI_SERVER_HOST}/manifest/todolist-backend.git manifest
        - cd manifest
        - git checkout -b ${IMAGE_VERSION}
        - | 
            sed -i "s|image: .*|image: ${IMAGE_VERSION}|g" ./todolist-backend-deployment.yaml
        - git config --local user.email "ci-bot@mixiyady.com"
        - git config --local user.name "CI Bot"
        - git add deployment.yaml
        - git commit -m "Update image version to ${IMAGE_VERSION}"
        - git push origin ${IMAGE_VERSION}
    tags:
        - todolist-runner-build-shell
    rules:
        - if: '$CI_COMMIT_TAG'


send pipeline report production:
    stage: send report
    variables:
        GIT_STRATEGY: none
    script:
      - |
          curl -X POST "https://api.telegram.org/bot${TELE_BOT_TOKEN}/sendMessage" \
          -d "chat_id=${TELE_CHAT_ID}" \
          -d "text=Deployment Report for Production Environment:
          - Pipeline URL: ${CI_PIPELINE_URL}
          - Tag: ${TAG_URL}
          - Commit URL: ${COMMIT_URL}
      - echo "Send report completed"
    tags:
        - todolist-runner-build-shell
    rules:
        - if: '$CI_COMMIT_TAG'


send pipeline error notification:
    stage: send report
    variables:
        GIT_STRATEGY: none
    script:
        - |
            curl -X POST "https://api.telegram.org/bot${TELE_BOT_TOKEN}/sendMessage" \
            -d "chat_id=${TELE_CHAT_ID}" \
            -d "text=🚨 Pipeline failed for project '${CI_PROJECT_NAME}' at commit '${CI_COMMIT_SHORT_SHA}'. Please check the details below:
            - Pipeline URL: ${CI_PIPELINE_URL}
            - Commit URL: ${COMMIT_URL}
            - Merge Request URL: ${MERGE_REQUEST_URL}"
        - echo "Error notification sent to Telegram"
    tags:
        - todolist-runner-dev-shell
    rules:
        - if: '$CI_PIPELINE_STATUS == "failed"'
          when: always
